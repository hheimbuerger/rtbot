Right now, these are only snippets. More documentation will be added later. (How many
projects broke that promise already? :D)

===========================================================================================================

Path structure:
/					Contains the BotManager.py, the starting code for the bot.
/debugging_pluins	Various plugins that aren't used in the production environment but for testing.
/exceptions (*)		XML files that are dumped for every exception raised by a plugin. The
					filename consists of the date and time and a running number per bot session.
/lib				3rd party modules necessary for running the bot.
/logs (*)			The logs created by the bot.
/modules			Core modules of the bot.
/plugins			Plugins for the bot.
/resources			Various resources needed by various plugins. Also used as a storage area for plugins.

(*) = Please do not commit the contents of these directories to the repository.

===========================================================================================================

The database connection (activated by entering a connection string in Settings.database_connection_string)
requires MySQLdb (http://sourceforge.net/projects/mysqldb) and SQLObject (http://www.sqlobject.org/) installed
to Python. It is not necessary for running the bot, though (and deactivated by default).

===========================================================================================================

Running the bot:
Windows:
	Run the BotManager.py. (Calling "python BotManager.py" might be necessary, depending on your setup.)
Linux:
	Run the BotManager.py with a control parameter: "python BotManager.py start",
		"python BotManager.py stop", "python BotManager.py restart"

===========================================================================================================

Terminology: [needs improvement]
  - nick: the unique id of a current user in the channel
  - user: the object to a nick currently in the channel -- users are always associated to nicks but can link to names!
  - account: an account of a user that can be in the channel or not
  - name: the unique id of a user that can be in the channel or not -- names are always associated to accounts and aren't linked to nicks (forwards)
 
REMARK: Names should be persistently treated as unique user identifiers. If a user with a known name shows up,
he's expected to treated as the user who previously had this name. Users switching names is unsupported behaviour
and doesn't have to be handled by the plugins.

===========================================================================================================

Known user attributes:
(Documentation of the attributes associated with the user object of a nick.)
  - timeOfLastWhoAttempt [temporary]: used to give the user a grace period to auth by password or
                                      hostmask before he's put under MODE control
  - numberOfWhoAttempts [temporary]: that many times I try to WHO you before I give up trying to get
                                     a result and just put you under MODE control without a hostmask
                                     (can happen when you change nicks between me issuing a WHO and me
                                     retrieving the WHO result)
  - authedAs: the account name I could auth you to by password or hostmask, the existence of this attribute
              means the last auth attempt (by password or hostmask) was successful
  - authedByPassword: the (encrypted) password you gave me, the existence of this attribute means the last
              auth attempt by password was successful
  - timeOfLastAuth: (datetime) ...
  - isPunished: (Boolean) are you currently in punish mode?
  - isMuted: (Boolean) are you currently muted?
  - group: (String, but shouldn't be set to a value outside the constants in AuthenticationPlugin::UserAccount)
           the permission group I could associate you with
  - passwordSetAuthorization: (dictionary) set when one user grants another to set a password, contains
                              the keys "timestamp", "account" and "sender"

===========================================================================================================

Plugin Development:

Event handler signatures:

## generic: ##
def dispose(self):					# also called when a plugin crashes

## From IrcLib: ##
def onJoin(self, source):
def onChangeNick(self, source, target):
def onLeave(self, source):				 	# called *before* user list update!
def onKick(self, source, target, reason):	# called *before* user list update!
def onQuit(self, source, reason):			# called *before* user list update!
def onChannelMode(self, source, flags):
def onUserMode(self, source, targets, flags):
def onNotice(self, source, message):
def onChannelMessage(self, source, message):
def onChannelEmote(self, source, emote):
def onPrivateMessage(self, source, message):
def onPrivateEmote(self, source, emote):
def onChannelTopicChange(source, topic):
def onWhoResult(self, user):
def onWhoisResult(self, user):

## From HTTPServer: ##
?

## From RPCServer: ##
?

Plugin lifecycle:

* online?
* enabled?
* when unloaded? when loaded?

===========================================================================================================

Brave New Bot (aka. RTBot Revolution aka. NYI aka ToDo):
The plugin contract:
* plugins declare their dependencies in a static method called getDependencies. This should return a list
  of strings that are the names of other plugin python modules. (eg. ["BarPlugin", "FooPlugin"])
* the plugins can't use these dependencies in the constructor (__init__)
* after construction, the method/event onInitialise is called/fired if it exists. By this time, the plugin
  is guaranteed to have attributes corresponding to its dependencies injected. These attributes will have
  the same names as their modules, except that the first letter will be lower-case to follow the coding
  style. (eg. self.barPlugin, self.fooPlugin)
* In addition, each plugin is guaranteed to have attributes corresponding to base modules:
    - irclib
    - httpserver
    - rpcserver
    - accountmanager
    - pluginInterface
* before being unloaded, the method dispose will be called on the plugin -- even if the plugin is
  unloaded because it raised an exception (exceptions raised in the dispose() method will be ignored!)
* if an exception is raised during plugin execution, all plugins between the point of raising and the
  pluginInterface will be disabled for further investigation

===========================================================================================================

PluginInterface - public interface:

* __init__(pluginDirectoryPath, metaDataFilename): None
* heartbeat(): list of tuples of ?
    called approximately every 10s to check the plugins for updates/additions/removals -- returns
    a list of events about everything that happened
* getPlugin(pluginName): instance
    used to retrieve a plugin object, shouldn't normally be used
* getPluginNames(): list of strings
    user to retrieve a list of all plugin names (including disabled and offline ones)
* getPluginState(pluginName): tuple of ?
    used to retrieve the state of a plugin (disabled? offline? why? dependencies missing? which ones?
    deactivated after crash? when? last loaded/updated when?)
* enablePlugin(pluginName): None (Boolean?)
    enable the plugin, maybe return False if the plugin is not online, i.e. the enabling failed (crashed
    or missing dependencies)
* disablePlugin(pluginName): None
    disable the plugin (unload it?)
* reloadPlugin(pluginName): None (Boolean?)
    to force a reload of a plugin


